name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      selenium:
        image: selenium/standalone-chrome:latest  # Using Selenium Chrome standalone service
        options: --shm-size 2g  # Increase shared memory size for Chrome
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify the Node.js version

      - name: Install Node.js dependencies
        run: npm install  # Install all project dependencies

      - name: Install Mocha Globally (if Mocha is not in `package.json`)
        run: npm install -g mocha

      - name: Run Mocha tests
        run: npm test  # Assuming your test script runs Mocha

      

      - name: Build npm Packages
        run: |
          if [ -f "package.json" ]; then  # Check if package.json file exists
            echo "Building npm packages application..."
            npm run build
          else
            echo "No npm packages build configuration found; skipping build."
          fi

      - name: Run npm Tests
        run: npm test  
        

      - name: Check Docker version
        run: docker --version

      - name: Build Docker image
        run: |
          if [ -f "Dockerfile" ]; then  # Check if Dockerfile exists
            echo "Building Docker image..."
            docker build -t my-selenium-app:latest .
          else
            echo "No Dockerfile found; skipping Docker build."
          fi

      - name: Save Docker image
        run: |
          docker image save my-selenium-app:latest | xz -z -e -7 -T0 > image.xz
          echo "Docker image saved as image.xz"

      - name: List Files
        run: ls -la  # Verify that image.xz was created

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_number }}  # Use the run number as the version tag
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: image.xz  # Path to the compressed Docker images
          asset_name: image.xz
          asset_content_type: application/x-xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
            python-version: '3.x'  # Specify your Python version (e.g., 3.8, 3.9, etc.)
    
      - name: Install dependencies
        run: |
            pip install selenium webdriver-manager
    
      - name: Check installed packages
        run: pip list  # This will confirm 
    
      - name: Run Selenium test
        run: python Google.py

      - name: Show test results
        run: python Google.py > test_results.log

      
      - name: Confirm test execution
        
        run: python Google.py > test_results.log
      
      - name: Handle test failure
        
        run: python Google.py > test_results.log


      - name: Archive Test Report
        uses: actions/upload-artifact@v3
        with:
          name: selenium-test-report
          path: report.html
      - name: Archive Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test_results.log
      - name: Check if tests passed
        run: |
          if grep -q "FAILED" test_results.log; then
            echo "Some tests failed."
            exit 1  # Ensure the workflow fails if any test fails
          else
            echo "All tests passed."
          fi

     
      - name: Deploy application
        run: npm run deploy
        
