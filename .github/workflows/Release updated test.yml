name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          npm install || exit 1

      - name: Install Mocha Globally (if Mocha is not in `package.json`)
        run: |
          npm install -g mocha || exit 1

      - name: Run Mocha Tests
        run: |
          mocha || exit 1

      - name: Build npm Packages
        run: |
          npm run build || exit 1

      - name: Run npm Tests
        run: |
          npm test || exit 1

      - name: Check Docker Version
        run: |
          docker --version || exit 1

      - name: Build Docker Image
        run: |
          docker build -t my-selenium-app:latest . || exit 1

      - name: Save Docker Image
        run: |
          docker image save my-selenium-app:latest | xz -z -e -7 -T0 > image.xz || exit 1

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ github.run_id }}  # Use the run id as the version tag
          release_name: Release ${{ github.run_id }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically available in Actions

      - name: Upload Release Asset
        run: |
          if [[ -n "${{ steps.create_release.outputs.upload_url }}" ]]; then
            actions/upload-release-asset@v1
          else
            exit 1
          fi

      - name: Install Selenium
        run: |
          pip install selenium || exit 1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip && pip install selenium webdriver-manager || exit 1

      - name: Run Google Search Test
        id: run_tests
        run: |
          python Google.py > test_results.log || exit 0

      - name: Show test results
        run: |
          cat test_results.log || exit 1
      
      - name: Confirm test execution
        if: ${{ steps.run_tests.outcome == 'success' }}
        run: |
          cat test_results.log
      
      - name: Handle test failure
        if: ${{ steps.run_tests.outcome != 'success' }}
        run: |
          cat test_results.log

      - name: Deploy application
        run: |
          npm run deploy || exit 1
