name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Install Mocha Globally (if Mocha is not in `package.json`)
        run: npm install -g mocha

      - name: Run Mocha Tests
        run: |
          if ! mocha; then
            echo "Mocha test execution failed. Exiting..."
            exit 1
          fi

      - name: Build Frontend
        run: npm run build

      - name: Run Frontend Tests
        run: |
          if ! npm test; then
            echo "Frontend tests failed. Exiting..."
            exit 1
          fi

      - name: Check Docker Version
        run: |
          if ! docker --version; then
            echo "Docker is not installed or the version is incompatible. Exiting..."
            exit 1
          fi

      - name: Build Docker Image
        run: |
          if ! docker build -t my-image:latest .; then
            echo "Docker image build failed. Exiting..."
            exit 1
          fi

      - name: Save Docker Image
        run: docker save my-image:latest -o my-image.tar

      - name: Create GitHub Release
        id: create_release  # Adding an id to reference the output
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.0
          release_name: "Release v1.0.0"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Release Asset
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Correct reference to the output
          asset_path: ./my-image.tar
          asset_name: my-image.tar
          asset_content_type: application/x-tar
      

       
      - name: Install Selenium
        run: pip install selenium

      - name: Run Google Search Test
        run: |
          if ! python google_search_test.py; then
            echo "Google Search Test failed. Exiting..."
            exit 1
          fi

      - name: Deploy Frontend
        if: success()
        run: echo "Deploying frontend..."
